#!/bin/sh

######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -eu
umask 0022
export LC_ALL=C
export UNIX_STD=2003

# === Define the functions for printing usage and exiting ============
print_usage_and_exit() {
    cat <<-USAGE 1>&2
	Usage: ${0##*/} [<options>] <subcommand,...> <pm-options>
	Options:
	  -m | --manager=<package-manager> ... specify package manager to execute subcommand.

	Subcommands:
	  help ................ show detailed usage of subcommand.
	  install <package> ... install package. This subcommand needs to --manager option.
	  remove <package> .... remove installed package. This subcommand needs to --manager option.
	  list ................ list installable packages.
	  list-installed ...... list installed packages.
	  list-upgradable ..... list upgradable packages.
	  search <package> .... search in installable packages.
	  update .............. update package list cache.
	  upgrade ............. upgrade installed packages to the latest.
	USAGE
    exit 1
}

error_exit() {
    ${2+:} false && echo "${0##*/}: $2" 1>&2
    exit $1
}

# === Detect home directory of this app ==============================
Homedir="$(d=${0%/*}/; [ "_$d" = "_$0/" ] && d='./'; cd "$d.."; pwd)"
cd "$Homedir"


######################################################################
# Argument Parsing
######################################################################

# === Read options ===================================================
while :; do
    case "${1:-}" in
        -m)
            pm="${2}"
            shift 2
            if [ "$pm" != "${pm#*/}" ]; then
                error_exit 1 "Invalid package manager name: $pm"
            fi
            ;;
        --manager=*)
            pm="${1#--manager=}"
            shift
            if [ "$pm" != "${pm#*/}" ]; then
                error_exit 1 "Invalid package manager name: $pm"
            fi
            ;;
        --)
            shift
            break
            ;;
        --help|-h)
            print_usage_and_exit
            ;;
        --*|-*)
            error_exit 1 'Invalid option'
            ;;
        *)
            break
            ;;
    esac
done

# === Read Subcommand ================================================
subcmd="${1:-}" && shift


######################################################################
# Main Routine
######################################################################

pmexec() {
    pm="$1"
    shift

    if [ "$pm" != "${pm##*/}" ]; then
        "$pm" "$@"
        return
    fi

    if [ -e "./managers/${pm}" ]; then
        "./managers/${pm}" "$@"
    else
        "./config/plugins/${pm}" "$@"
    fi
}

if [ "$(printf '%s\n' "$subcmd" | tr ',' '\n' | wc -l)" -ge 2 ]; then
    printf '%s\n' "$subcmd" | tr ',' '\n' | while read -r cmd; do
        "$0" "$cmd" "$@"
    done
    exit
fi

if [ "$subcmd" = help ]; then
    if [ -n "${pm:-}" ] && [ -e "./managers/${pm}" ]; then
        printf '%s\n' "usage: pmo --manager=${pm} <subcommand> [args...]"
        printf '%s\n' 'subcommand:'
        cat "./managers/${pm}" | sed -n '/^#@ SUBCMD_CASE$/,/^esac$/p' | grep '^ *[a-zA-Z-]\{1,\})' >&2
    elif [ -n "${pm:-}" ]; then
        ls "./config/plugins/${pm}" >/dev/null
        printf '%s\n' "usage: pmo --manager=${pm} <subcommand> [args...]"
        printf '%s\n' 'subcommand:'
        cat "./config/plugins/${pm}" | sed -n '/^#@ SUBCMD_CASE$/,/^esac$/p' | grep '^ *[a-zA-Z-]\{1,\})' >&2
    else
        "$0" --manager=pmo help
        echo
        (find './managers' -maxdepth 1 -not -type d ; "$0" -m pmo list-installed) |
            while IFS= read -r pm; do
                "$0" --manager="${pm##*/}" help
                echo
            done >&2
    fi
    exit
fi

if [ -n "${pm:-}" ] || [ "$subcmd" = install ] || [ "$subcmd" = remove ]; then
    pmexec "$pm" "$subcmd" "$@"
    exit
fi

(find './managers' -maxdepth 1 -not -type d ; "$0" -m pmo list-installed) |
    while IFS= read -r pm; do
        if ! pmexec "$pm" "$subcmd" "$@" </dev/tty; then
            exit 1
        fi
    done
